- @date = Time.mktime(2009, 8, 30)
- @description = "Ever wondered how Heroku “deploying” Rails apps via Git works? It’s very easy to setup Git."
- @keywords = %w(Git Rails Deploy Heroku Push Auto)
%article.post(data-slug="howto-auto-deploy-rails-apps-after-git-push")
  %h1= @title = 'How to auto deploy Rails apps after Git push'
  :markdown
    For my most recent project, I had to share a git repository with another Rails developer. He also had to make deploys on my server. As my server has many projects, I though about having another way than giving him access via SSH for cap deploy. 
    
    I remembered [Heroku](http://www.heroku.com) automatically deploys Rails apps after commits. So here’s how you can have the same functionality with pure Git.

    Configuration of SSH And Users
    ------------------------------

    I’m assuming the following configuration:

    Git repository
    :   /home/git/awesome-rails-app.git
    
    Deploy path
    :   /var/www/awesome-rails-app
    
    Git user
    :   git
    
    Deploy user
    :   deploy
    
    Authentication
    :   with SSH keys

    First, create a SSH key for the user git (unless you already did so) and add it for for the deploy user and vice versa:

  :commandline
    # log in as git:
    ssh-keygen -t rsa
    # log in as deploy:
    cat /home/git/.ssh/id_rsa.pub >> /home/deploy/authorized_keys
    ssh-keygen -t rsa
    # log in as git:
    cat /home/deploy/.ssh/id_rsa.pub >> /home/git/authorized_keys

  :markdown
    Installing the Git Hook
    -----------------------

    Git offers [some hooks](http://book.git-scm.com/5_git_hooks.html), where you can add your own code. The most interestion hook for having a deploy is “post-receive”. Just add the deploy command:

  :bashcode
    # File: /home/git/awesome-rails-app.git/hooks/post-receive
    #!/bin/sh

    cd /var/www/awesome-rails-app/current && cap deploy:migrations

    ## If Git isn’t on the same server as the application:
    # ssh deploy@deploy-server.com \
    #   'cd /var/www/awesome-rails-app/current && cap deploy:migrations'
    ## Don’t forget to add the SSH keys.

  :markdown
    Make this file executable:

  :commandline
    chmod +x /home/git/awesome-rails-app.git/hooks/post-receive
    
  :markdown
    Finish
    ------

    Now it should work (on your local mashine):

  :commandline
    git push origin master

  :markdown
    You’ll see all commands of the cap deploy:migrations process in your console.

    This post was inspired by [this post](http://blog.elctech.com/2008/12/16/deploy-automatically-after-a-new-git-push-like-heroku/). After you finished the automatical deploy, there is some other interesting homework: auto test before commits, integration your bug tracker, ...